# http://localhost:8081/api/polaznici
# http://localhost:8081/api/upisi/polaznik/1

# Onemogu?ava Hibernate automatsko generisanje i a?uriranje database schema
# (none = ne mijenjaj schema, koristi postoje?u)
spring.jpa.hibernate.ddl-auto=none

# Postavlja Hibernate PhysicalNamingStrategy na standardnu implementaciju
# koja NE modificira case (velika/mala slova) naziva tabela i kolona
# Ovo sprje?ava automatsku konverziju u lowercase
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Dodatna konfiguracija koja onemogu?ava Hibernate automatsko generisanje schema
# (none = ne poku?avaj sync-ovati model sa bazom)
spring.jpa.properties.hibernate.hbm2ddl.auto=none

# Omogu?ava izvr?avanje SQL skripti pri pokretanju aplikacije
spring.sql.init.mode=always

# Lokacija SQL skripte za kreiranje database schema (DDL - CREATE TABLE itd)
# Skripta se nalazi u resources folderu (classpath)
# schema.sql se izvrsi prva (kreiranje tablica), a data.sql druga (ubacivanje podataka u tablice)
spring.sql.init.schema-locations=classpath:schema.sql

# Lokacija SQL data.sql skripte za popunjavanje podataka u talice (DML - INSERT itd)
# Skripta se nalazi u resources folderu (classpath)
spring.sql.init.data-locations=classpath:data.sql

# Odga?a inicijalizaciju data source-a dok se ne izvr?e schema i data skripte
# Osigurava da se migracije izvr?e prije nego ?to Hibernate poku?a pristupiti bazi
spring.jpa.defer-datasource-initialization=true

# JDBC connection string za SQL Server
# Povezuje se na lokalni SQL Server (localhost:1433), bazu JavaAdv
# Opcije za enkripciju (encrypt=true) i trust server certifikata (trustServerCertificate=true)
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=JavaAdv;encrypt=true;trustServerCertificate=true

# Korisni?ko ime za pristup bazi podataka (SQL Server 'sa' account)
spring.datasource.username=sa

# Lozinka za pristup bazi podataka
spring.datasource.password=SQL

# Driver klasa za SQL Server JDBC konekciju
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

# Specifi?ni Hibernate dijalekt za SQL Server
# Optimizuje SQL upite za SQL Server specifi?nosti
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect

# Prikazuje generisane SQL upite u logovima (korisno za debagiranje)
spring.jpa.show-sql=true

# Formatira generisane SQL upite za ljep?i prikaz u logovima
spring.jpa.properties.hibernate.format_sql=true

# DEBUG nivo logovanja za Hibernate SQL upite
# Prikazuje sve izvr?ene SQL upite
logging.level.org.hibernate.SQL=DEBUG

# TRACE nivo logovanja za Hibernate tipove parametara
# Prikazuje vrednosti parametara u SQL upitima
logging.level.org.hibernate.type=TRACE

# Port na kojem ?e Spring Boot aplikacija slu?ati zahteve
server.port=8081

# Onemogu?iti Spring Security automatsko uklju?ivanje.
# Ukloniti Using generated security password poruku.
# Ukloniti login formu i Basic Auth za?titu s endpointa.
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration



#KOMENTARI:
#ddl-auto=none i hbm2ddl.auto=none rade sli?no, ali je bolje koristiti oba za kompatibilnost
#PhysicalNamingStrategyStandardImpl sprje?ava Hibernate da modificira case naziva
#SQL skripte (schema.sql i data.sql) se izvr?avaju pri pokretanju aplikacije
#Dijalekt je bitan za pravilno generisanje SQL upita specifi?nih za SQL Server
#Logging postavke (DEBUG i TRACE) su veoma korisne za razvoj, ali treba ih onemogu?iti u produkciji

#Schema je ?iri pojam od samih tablica. Uklju?uje:
#Tablice (Tables) - Da, to je glavni dio
#Poveznice izme?u tablica (Foreign Keys)
#Indekse (Indexes)
#Poglede (Views)
#Procedure (Stored Procedures)
#Funkcije (Functions)
#Okida?e (Triggers)
#Druge database objekte

#Klju?ne razlike:
#Tablica	ima samo jednu tabelu sa kolonama i redovima
#Schema	ima cjelokupnu strukturu baze: sve tablice + veze + indeksi + drugi objekti.
#
#Za?to je va?no razumjeti ovu razliku?
#Kada koristite spring.sql.init.schema-locations, pripremate CIJELU strukturu baze.
#Migracije baze podataka (Flyway, Liquibase) rade sa cijelom shemom, ne samo tablicama.
#Schema definira kako aplikacija komunicira sa bazom na strukturnom nivou.

#Kako Spring Boot upravlja redoslijedom:
#Uvijek se prvo izvr?ava schema.sql (DDL - Data Definition Language)
#Kreiranje tablica
#Definiranje veza (foreign keys)
#Kreiranje indeksa itd.
#Zatim se izvr?ava data.sql (DML - Data Manipulation Language)
#INSERT naredbe
#Po?etni podaci
#Testni podaci